// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Room {
  id                            String              @id @default(cuid())
  url                           String              @unique
  title                         String
  description                   String
  seo                           String?
  visibility                    Boolean             @default(false)
  price1                        Int
  additionalNightPrice1         Int
  price2                        Int?
  additionalNightPrice2         Int?
  price3                        Int?
  additionalNightPrice3         Int?
  numberOfGuestsForDefaultPrice Int
  maxGuests                     Int
  createdAt                     DateTime            @default(now())
  updatedAt                     DateTime            @updatedAt
  roomFacility                  RoomFacility[]
  reservations                  Reservation[]
  roomPackageItems              RoomPackageItem[]
  roomMultiPackages             RoomMultiPackage[]
  roomDiscounts                 RoomDiscount[]
  roomGalleryImages             RoomsGalleryImage[] @relation("galleryImages")
  roomPreviewImages             RoomsGalleryImage[] @relation("previewImages")

  //* mode-1 - seasons
  seasons        SeasonList[]
  seasonalPrices SeasonalRoomPrice[]

  //* mode-2 - seasons
  // seasonalPricings RoomSeasonalPricing[]
}

//* mode 1 - pricing - seasonal prices individually for each room
model SeasonList {
  id                 String              @id @unique @default(cuid())
  name               String
  dateFrom           String
  dateTo             String
  rooms              Room[] //--> then get roomSeasonalPrices from connection to another model in this room
  seasonalRoomPrices SeasonalRoomPrice[] // this one is to load the seasonal prices from room only based on if the id is in this column
}

model SeasonalRoomPrice {
  id                   String       @id @unique @default(cuid())
  season               SeasonList   @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId             String
  nightPrice           Int
  additionalNightPrice Int
  room                 Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId               String
  weekDivision         WeekDivision @relation(fields: [weekDivisionId], references: [id], onDelete: Cascade)
  weekDivisionId       String
}

model WeekDivision {
  id                 String              @id @unique @default(cuid())
  partOfTheWeek      WeekDay[]
  seasonalRoomPrices SeasonalRoomPrice[]
}

model WeekDay {
  id                   String        @id @unique @default(cuid())
  dayInAWeek           String        @unique
  divisionAssignment   WeekDivision? @relation(fields: [divisionAssignmentId], references: [id], onDelete: Cascade)
  divisionAssignmentId String?
}

//* mode 2 - pricing - seasonal prices the same collectively for all selected objects inside seasonal pricing
// - keeping this mode for future usage to implement for bigger properties/properties who need bulk edit
// model Season {
//   id       String                @id @unique @default(cuid())
//   name     String
//   dateFrom String
//   dateTo   String
//   pricings RoomSeasonalPricing[]
// }

// model RoomSeasonalPricing {
//   id                   String @id @unique @default(cuid())
//   name                 String
//   nightPrice           Int
//   additionalNightPrice Int
//   season               Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
//   seasonId             String
//   rooms                Room[]
// }

model RoomsGallery {
  id     String              @id @unique @default(cuid())
  name   String
  images RoomsGalleryImage[]
}

model RoomsGalleryImage {
  id                String       @id @default(cuid())
  altText           String?
  contentType       String
  blob              Bytes
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  roomsGallery      RoomsGallery @relation(fields: [roomsGalleryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomsGalleryId    String
  roomGalleryImages Room[]       @relation("galleryImages")
  roomPreviewImages Room[]       @relation("previewImages")

  // non-unique foreign key
  @@index([roomsGalleryId])
}

model RoomFacility {
  id       String  @id @unique @default(cuid())
  name     String
  iconName String?
  rooms    Room[]
}

model RoomPackageItem {
  id                String             @id @unique @default(cuid())
  name              String
  price             Int
  rooms             Room[]
  roomMultiPackages RoomMultiPackage[]
  visibility        Boolean            @default(true)
  reservations      Reservation[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model RoomMultiPackage {
  id           String            @id @unique @default(cuid())
  name         String
  price        Int
  rooms        Room[]
  packageItems RoomPackageItem[]
  reservations Reservation[]
  dateFrom     String
  dateTo       String
  visibility   Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model RoomDiscount {
  id         String   @id @unique @default(cuid())
  type       String   // type of discount - "multi-night" / "promo code"
  nights     String?   // using this if "multi-night" type
  code       String?   // using this if "promo-code" type
  value      Int      // value of discount
  valueType  String   // "percentage" or "fixed"
  rooms      Room[]
  visibility Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Reservation {
  id                  String             @id @unique @default(cuid())
  status              String             @default("accepted")
  name                String
  email               String
  message             String?
  totalPrice          Int
  numberOfGuests      Int
  numberOfNights      Int
  reservationNumber   String             @unique
  reservationDateFrom String
  reservationDateTo   String
  createdAtString     String
  room                Room               @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId              String
  roomPackageItems    RoomPackageItem[]
  roomMultiPackages   RoomMultiPackage[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  //? think about how we could save all the prices from which the total one was calculated, save e.g. just as a string with splitters
  //? fields for possible editing, but probably not easily done with week part's pricings & seasons combined, keeping just in case
  // nightPrice                    Int
  // additionalGuestNightPrice     Int?
  // numberOfGuestsForDefaultPrice Int //this was used here primarily if the reservation was edited, so the prices would keep its logic

  // This helps our order by in the reservations search a LOT
  @@index([roomId, updatedAt])
}

model Page {
  id         String  @id @default(cuid())
  url        String  @unique
  title      String
  content    String
  seo        String?
  visibility Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images PageImage[]
  // previewImage //TODO: implement selection from galleries like in rooms, same for images above
}

model PageImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pageId String

  // non-unique foreign key
  @@index([pageId])
}

model Translation {
  id   String @id @unique @default(cuid())
  name String @unique
  en   String
  cs   String
}
